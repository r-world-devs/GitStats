% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GitStats.R
\name{GitStats}
\alias{GitStats}
\title{A statistics platform for Git clients}
\description{
An R6 class object with methods to derive information from multiple Git platforms.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{clients}}{A list of API connections information.}

\item{\code{team}}{A character vector containing team members.}

\item{\code{storage}}{A local database credentials to store output.}

\item{\code{storage_schema}}{A schema of database.}

\item{\code{use_storage}}{A boolean to check if storage is set.}

\item{\code{repos_dt}}{An output table of repositories.}

\item{\code{commits_dt}}{An output table of commits.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{GitStats$new()}}
\item \href{#method-set_connection}{\code{GitStats$set_connection()}}
\item \href{#method-set_organizations}{\code{GitStats$set_organizations()}}
\item \href{#method-set_team}{\code{GitStats$set_team()}}
\item \href{#method-set_storage}{\code{GitStats$set_storage()}}
\item \href{#method-show_storage}{\code{GitStats$show_storage()}}
\item \href{#method-storage_off}{\code{GitStats$storage_off()}}
\item \href{#method-storage_on}{\code{GitStats$storage_on()}}
\item \href{#method-get_repos}{\code{GitStats$get_repos()}}
\item \href{#method-get_commits}{\code{GitStats$get_commits()}}
\item \href{#method-print}{\code{GitStats$print()}}
\item \href{#method-clone}{\code{GitStats$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \code{GitStats} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GitStats$new()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A new \code{GitStats} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_connection"></a>}}
\if{latex}{\out{\hypertarget{method-set_connection}{}}}
\subsection{Method \code{set_connection()}}{
Method to set connections to Git platforms
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GitStats$set_connection(api_url, token, orgs = NULL, set_org_limit = 300)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{api_url}}{A character, url address of API.}

\item{\code{token}}{A token.}

\item{\code{orgs}}{A character vector of organisations (owners of repositories
in case of GitHub and groups of projects in case of GitLab).}

\item{\code{set_org_limit}}{An integer defining how many orgs API may pull.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing, puts connection information into \verb{$clients} slot
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_organizations"></a>}}
\if{latex}{\out{\hypertarget{method-set_organizations}{}}}
\subsection{Method \code{set_organizations()}}{
A method to set you organizations.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GitStats$set_organizations(..., api_url = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{A character vector of oganizations (repo owners or project
groups).}

\item{\code{api_url}}{A url for connection.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing pass information on organizations into \verb{$orgs} field of
\verb{$clients}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_team"></a>}}
\if{latex}{\out{\hypertarget{method-set_team}{}}}
\subsection{Method \code{set_team()}}{
A method to set your team.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GitStats$set_team(team_name, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{team_name}}{A name of a team.}

\item{\code{...}}{A character vector of team members (names and logins).}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Nothing, pass team information into \verb{$team} field.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_storage"></a>}}
\if{latex}{\out{\hypertarget{method-set_storage}{}}}
\subsection{Method \code{set_storage()}}{
A method to set local storage for the output.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GitStats$set_storage(type, dbname, schema, host, port, user, password)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{type}}{A character, type of storage.}

\item{\code{dbname}}{Name of database.}

\item{\code{schema}}{A db schema.}

\item{\code{host}}{A host.}

\item{\code{port}}{An integer, port address.}

\item{\code{user}}{Username.}

\item{\code{password}}{A password.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
This is a wrapper over \code{DBI::dbConnect()} function. This functionality
is meant among other to improve \code{GitStats} performance. Basically the
idea is to cache your API responses in a database and retrieve them
when necessary. E.g. when you call \code{get_commits(date_from = '2020-01-01')} it will save the results to your database and when you
call it next time, \code{get_commits()} will retrieve from API only these
results that do not exist in the databse (the new ones).
}

\subsection{Returns}{
A \code{GitStats} object with information on local database.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-show_storage"></a>}}
\if{latex}{\out{\hypertarget{method-show_storage}{}}}
\subsection{Method \code{show_storage()}}{
Print content of database.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GitStats$show_storage()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A data.frame of table names.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-storage_off"></a>}}
\if{latex}{\out{\hypertarget{method-storage_off}{}}}
\subsection{Method \code{storage_off()}}{
Switch off storage of data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GitStats$storage_off()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing, turns field \verb{$use_storage} to FALSE
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-storage_on"></a>}}
\if{latex}{\out{\hypertarget{method-storage_on}{}}}
\subsection{Method \code{storage_on()}}{
Switch on storage of data.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GitStats$storage_on()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Nothing, turns field \verb{$use_storage} to TRUE
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_repos"></a>}}
\if{latex}{\out{\hypertarget{method-get_repos}{}}}
\subsection{Method \code{get_repos()}}{
A method to list all repositories for an organization,
a team or by a keyword.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GitStats$get_repos(
  by = "org",
  phrase = NULL,
  language = NULL,
  print_out = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{by}}{A character, to choose between: \itemize{\item{org - organizations
(owners of repositories)} \item{team - A team} \item{phrase - A keyword in
code blobs.}}}

\item{\code{phrase}}{A character, phrase to look for in codelines.}

\item{\code{language}}{A character specifying language used in repositories.}

\item{\code{print_out}}{A boolean stating whether to print an output.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data.frame of repositories
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_commits"></a>}}
\if{latex}{\out{\hypertarget{method-get_commits}{}}}
\subsection{Method \code{get_commits()}}{
A method to get information on commits.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GitStats$get_commits(
  date_from = NULL,
  date_until = Sys.time(),
  by = "org",
  print_out = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{date_from}}{A starting date to look commits for}

\item{\code{date_until}}{An end date to look commits for}

\item{\code{by}}{A character, to choose between: \itemize{\item{org - organizations
(owners of repositories)} \item{team - A team} \item{phrase - A keyword in
code blobs.}}}

\item{\code{print_out}}{A boolean stating whether to print an output.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A data.frame of commits
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
A print method for a GitStats object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GitStats$print()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{GitStats$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
